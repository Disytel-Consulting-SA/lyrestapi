/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.libertya.api.stub.iface;

import org.libertya.api.stub.model.ProductPrice;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "Productprice", description = "the Productprice API")
public interface ProductpriceApi {

    Logger log = LoggerFactory.getLogger(ProductpriceApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Nuevo precio de articulo", nickname = "addProductPrice", notes = "Agrega un nuevo precio a un articulo", response = String.class, tags={ "productprice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK. ID del precio de producto creado es retornado, el cual es formato por su ID de Producto y ID de Version de Lista de Precio", response = String.class),
        @ApiResponse(code = 409, message = "Imposible insertar", response = String.class) })
    @RequestMapping(value = "/v1.0/productprices",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> addProductPrice(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductPrice body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductpriceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Elimina un precio de articulo", nickname = "deleteProductPrice", notes = "Elimina un precio de articulo existente", response = String.class, tags={ "productprice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 409, message = "Imposible eliminar", response = String.class),
        @ApiResponse(code = 404, message = "No encontrado", response = String.class),
        @ApiResponse(code = 204, message = "OK", response = String.class) })
    @RequestMapping(value = "/v1.0/productprices/{idProduct}/{idPriceListVersion}",
        produces = { "text/plain" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<String> deleteProductPrice(@ApiParam(value = "ID del articulo",required=true) @PathVariable("idProduct") Integer idProduct
,@ApiParam(value = "ID de la Version de Lista de Precio",required=true) @PathVariable("idPriceListVersion") Integer idPriceListVersion
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductpriceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Retrieve all product prices", nickname = "getAllProductPrices", notes = "Retorna la lista completa de precios", response = ProductPrice.class, responseContainer = "List", tags={ "productprice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductPrice.class, responseContainer = "List") })
    @RequestMapping(value = "/v1.0/productprices",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ProductPrice>> getAllProductPrices(@ApiParam(value = "Criterio de filtrado") @Valid @RequestParam(value = "filter", required = false) String filter
,@ApiParam(value = "Campos a recuperar") @Valid @RequestParam(value = "fields", required = false) String fields
,@ApiParam(value = "Criterio de ordenado") @Valid @RequestParam(value = "sort", required = false) String sort
,@ApiParam(value = "Limite de elementos a retornar por pagina") @Valid @RequestParam(value = "limit", required = false) Integer limit
,@ApiParam(value = "Desplazamiento de salto a patir del primer elemento") @Valid @RequestParam(value = "offset", required = false) Integer offset
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"pricelist\" : 7.061401241503109,\n  \"m_pricelist_version_id\" : 5,\n  \"m_product_id\" : 5,\n  \"pricestd\" : 9.301444243932576,\n  \"updatedby\" : 3,\n  \"createdby\" : 1,\n  \"ad_org_id\" : 6,\n  \"created\" : \"created\",\n  \"isactive\" : true,\n  \"ad_client_id\" : 0,\n  \"updated\" : \"updated\",\n  \"pricelimit\" : 2.3021358869347655\n}, {\n  \"pricelist\" : 7.061401241503109,\n  \"m_pricelist_version_id\" : 5,\n  \"m_product_id\" : 5,\n  \"pricestd\" : 9.301444243932576,\n  \"updatedby\" : 3,\n  \"createdby\" : 1,\n  \"ad_org_id\" : 6,\n  \"created\" : \"created\",\n  \"isactive\" : true,\n  \"ad_client_id\" : 0,\n  \"updated\" : \"updated\",\n  \"pricelimit\" : 2.3021358869347655\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductpriceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Recupera un precio de producto en particular", nickname = "retrieveProductPrice", notes = "Recupera la informacion del precio de un articulo en particular", response = ProductPrice.class, tags={ "productprice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductPrice.class) })
    @RequestMapping(value = "/v1.0/productprices/{idProduct}/{idPriceListVersion}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProductPrice> retrieveProductPrice(@ApiParam(value = "ID del articulo",required=true) @PathVariable("idProduct") Integer idProduct
,@ApiParam(value = "ID de la Version de Lista de Precio",required=true) @PathVariable("idPriceListVersion") Integer idPriceListVersion
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pricelist\" : 7.061401241503109,\n  \"m_pricelist_version_id\" : 5,\n  \"m_product_id\" : 5,\n  \"pricestd\" : 9.301444243932576,\n  \"updatedby\" : 3,\n  \"createdby\" : 1,\n  \"ad_org_id\" : 6,\n  \"created\" : \"created\",\n  \"isactive\" : true,\n  \"ad_client_id\" : 0,\n  \"updated\" : \"updated\",\n  \"pricelimit\" : 2.3021358869347655\n}", ProductPrice.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductpriceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Actualiza el precio de un articulo existente", nickname = "updateProductPrice", notes = "", response = String.class, tags={ "productprice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 409, message = "Imposible actualizar", response = String.class),
        @ApiResponse(code = 404, message = "No encontrado", response = String.class) })
    @RequestMapping(value = "/v1.0/productprices/{idProduct}/{idPriceListVersion}",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<String> updateProductPrice(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductPrice body
,@ApiParam(value = "ID del articulo",required=true) @PathVariable("idProduct") Integer idProduct
,@ApiParam(value = "ID de la Version de Lista de Precio",required=true) @PathVariable("idPriceListVersion") Integer idPriceListVersion
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductpriceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
