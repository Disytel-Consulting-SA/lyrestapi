/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.libertya.api.stub.iface;

import org.libertya.api.stub.model.AllocationDocument;
import org.libertya.api.stub.model.AllocationHdr;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "Allocation", description = "the Allocation API")
public interface AllocationApi {

    Logger log = LoggerFactory.getLogger(AllocationApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Nuevoa OP/RC", nickname = "addAllocation", notes = "Agrega una nueva OP/RC", response = String.class, tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK. ID de OP/RC creada es retornado", response = String.class),
        @ApiResponse(code = 409, message = "Imposible insertar", response = String.class) })
    @RequestMapping(value = "/v1.0/allocations",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> addAllocation(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AllocationDocument body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Elimina una OP/RC", nickname = "deleteAllocation", notes = "Elimina una OP/RC existente", response = String.class, tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 409, message = "Imposible eliminar", response = String.class),
        @ApiResponse(code = 404, message = "No encontrado", response = String.class),
        @ApiResponse(code = 204, message = "OK", response = String.class) })
    @RequestMapping(value = "/v1.0/allocations/{id}",
        produces = { "text/plain" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<String> deleteAllocation(@ApiParam(value = "ID de OP/RC",required=true) @PathVariable("id") Integer id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Retrieve allocations", nickname = "getAllAllocations", notes = "Retorna una lista de OP/RC", response = AllocationHdr.class, responseContainer = "List", tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AllocationHdr.class, responseContainer = "List") })
    @RequestMapping(value = "/v1.0/allocations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<AllocationHdr>> getAllAllocations(@ApiParam(value = "Criterio de filtrado") @Valid @RequestParam(value = "filter", required = false) String filter
,@ApiParam(value = "Campos a recuperar") @Valid @RequestParam(value = "fields", required = false) String fields
,@ApiParam(value = "Criterio de ordenado") @Valid @RequestParam(value = "sort", required = false) String sort
,@ApiParam(value = "Limite de elementos a retornar por pagina") @Valid @RequestParam(value = "limit", required = false) Integer limit
,@ApiParam(value = "Desplazamiento de salto a patir del primer elemento") @Valid @RequestParam(value = "offset", required = false) Integer offset
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"retencion_amt\" : 7.386281948385884,\n  \"updatedby\" : 1,\n  \"ad_org_id\" : 6,\n  \"isactive\" : true,\n  \"description\" : \"description\",\n  \"datetrx\" : \"datetrx\",\n  \"c_doctype_id\" : 9,\n  \"c_banklist_id\" : 5,\n  \"actiondetail\" : \"actiondetail\",\n  \"createdby\" : 2,\n  \"c_posjournal_id\" : 3,\n  \"ad_client_id\" : 0,\n  \"c_allocationhdr_id\" : 5,\n  \"approvalamt\" : 1.4658129805029452,\n  \"docstatus\" : \"docstatus\",\n  \"dateacct\" : \"dateacct\",\n  \"c_currency_id\" : 7,\n  \"ismanual\" : true,\n  \"isapproved\" : true,\n  \"created\" : \"created\",\n  \"documentno\" : \"documentno\",\n  \"processed\" : true,\n  \"grandtotal\" : 4.145608029883936,\n  \"processing\" : true,\n  \"updated\" : \"updated\",\n  \"c_bpartner_id\" : 2,\n  \"allocationaction\" : \"allocationaction\",\n  \"allocationtype\" : \"allocationtype\"\n}, {\n  \"retencion_amt\" : 7.386281948385884,\n  \"updatedby\" : 1,\n  \"ad_org_id\" : 6,\n  \"isactive\" : true,\n  \"description\" : \"description\",\n  \"datetrx\" : \"datetrx\",\n  \"c_doctype_id\" : 9,\n  \"c_banklist_id\" : 5,\n  \"actiondetail\" : \"actiondetail\",\n  \"createdby\" : 2,\n  \"c_posjournal_id\" : 3,\n  \"ad_client_id\" : 0,\n  \"c_allocationhdr_id\" : 5,\n  \"approvalamt\" : 1.4658129805029452,\n  \"docstatus\" : \"docstatus\",\n  \"dateacct\" : \"dateacct\",\n  \"c_currency_id\" : 7,\n  \"ismanual\" : true,\n  \"isapproved\" : true,\n  \"created\" : \"created\",\n  \"documentno\" : \"documentno\",\n  \"processed\" : true,\n  \"grandtotal\" : 4.145608029883936,\n  \"processing\" : true,\n  \"updated\" : \"updated\",\n  \"c_bpartner_id\" : 2,\n  \"allocationaction\" : \"allocationaction\",\n  \"allocationtype\" : \"allocationtype\"\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Procesa una OP/RC", nickname = "processAllocation", notes = "", response = String.class, tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 409, message = "Imposible procesar", response = String.class),
        @ApiResponse(code = 404, message = "No encontrado", response = String.class) })
    @RequestMapping(value = "/v1.0/allocations/{id}/process",
        produces = { "text/plain" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<String> processAllocation(@ApiParam(value = "ID de la OP/RC a procesar",required=true) @PathVariable("id") Integer id
,@NotNull @ApiParam(value = "Accion a aplicar (completar, revertir, etc.)", required = true) @Valid @RequestParam(value = "action", required = true) String action
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Recupera una OP/RC en particular", nickname = "retrieveAllocation", notes = "Recupera la informacion de una OP/RC en particular", response = AllocationDocument.class, tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AllocationDocument.class) })
    @RequestMapping(value = "/v1.0/allocations/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AllocationDocument> retrieveAllocation(@ApiParam(value = "ID de la OP/RC",required=true) @PathVariable("id") Integer id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"header\" : {\n    \"retencion_amt\" : 7.386281948385884,\n    \"updatedby\" : 1,\n    \"ad_org_id\" : 6,\n    \"isactive\" : true,\n    \"description\" : \"description\",\n    \"datetrx\" : \"datetrx\",\n    \"c_doctype_id\" : 9,\n    \"c_banklist_id\" : 5,\n    \"actiondetail\" : \"actiondetail\",\n    \"createdby\" : 2,\n    \"c_posjournal_id\" : 3,\n    \"ad_client_id\" : 0,\n    \"c_allocationhdr_id\" : 5,\n    \"approvalamt\" : 1.4658129805029452,\n    \"docstatus\" : \"docstatus\",\n    \"dateacct\" : \"dateacct\",\n    \"c_currency_id\" : 7,\n    \"ismanual\" : true,\n    \"isapproved\" : true,\n    \"created\" : \"created\",\n    \"documentno\" : \"documentno\",\n    \"processed\" : true,\n    \"grandtotal\" : 4.145608029883936,\n    \"processing\" : true,\n    \"updated\" : \"updated\",\n    \"c_bpartner_id\" : 2,\n    \"allocationaction\" : \"allocationaction\",\n    \"allocationtype\" : \"allocationtype\"\n  },\n  \"lines\" : [ {\n    \"overunderamt\" : 6.84685269835264,\n    \"discountamt\" : 1.4894159098541704,\n    \"amount\" : 1.4658129805029452,\n    \"c_currency_id\" : 9,\n    \"ismanual\" : true,\n    \"updatedby\" : 7,\n    \"c_payment_id\" : 1,\n    \"changeamt\" : 3.616076749251911,\n    \"ad_org_id\" : 6,\n    \"created\" : \"created\",\n    \"isactive\" : true,\n    \"datetrx\" : \"datetrx\",\n    \"c_invoice_id\" : 4,\n    \"writeoffamt\" : 1.1730742509559433,\n    \"c_order_id\" : 7,\n    \"createdby\" : 1,\n    \"c_allocationline_id\" : 5,\n    \"c_cashline_id\" : 7,\n    \"line_description\" : \"line_description\",\n    \"ad_client_id\" : 0,\n    \"c_allocationhdr_id\" : 5,\n    \"c_invoice_credit_id\" : 2,\n    \"updated\" : \"updated\",\n    \"c_bpartner_id\" : 2\n  }, {\n    \"overunderamt\" : 6.84685269835264,\n    \"discountamt\" : 1.4894159098541704,\n    \"amount\" : 1.4658129805029452,\n    \"c_currency_id\" : 9,\n    \"ismanual\" : true,\n    \"updatedby\" : 7,\n    \"c_payment_id\" : 1,\n    \"changeamt\" : 3.616076749251911,\n    \"ad_org_id\" : 6,\n    \"created\" : \"created\",\n    \"isactive\" : true,\n    \"datetrx\" : \"datetrx\",\n    \"c_invoice_id\" : 4,\n    \"writeoffamt\" : 1.1730742509559433,\n    \"c_order_id\" : 7,\n    \"createdby\" : 1,\n    \"c_allocationline_id\" : 5,\n    \"c_cashline_id\" : 7,\n    \"line_description\" : \"line_description\",\n    \"ad_client_id\" : 0,\n    \"c_allocationhdr_id\" : 5,\n    \"c_invoice_credit_id\" : 2,\n    \"updated\" : \"updated\",\n    \"c_bpartner_id\" : 2\n  } ]\n}", AllocationDocument.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Actualiza una OP/RC existente", nickname = "updateAllocation", notes = "", response = String.class, tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 409, message = "Imposible actualizar", response = String.class),
        @ApiResponse(code = 404, message = "No encontrado", response = String.class) })
    @RequestMapping(value = "/v1.0/allocations/{id}",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<String> updateAllocation(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AllocationHdr body
,@ApiParam(value = "ID de la OP/RC a actualizar",required=true) @PathVariable("id") Integer id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
