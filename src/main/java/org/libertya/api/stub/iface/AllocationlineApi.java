/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.libertya.api.stub.iface;

import org.libertya.api.stub.model.AllocationLine;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;


@Validated
public interface AllocationlineApi {

    Logger log = LoggerFactory.getLogger(AllocationlineApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Nuevoa linea de OP/RC", description = "Agrega una nueva linea de OP/RC", security = {
        @SecurityRequirement(name = "jwtAuth")    }, tags={ "allocationline" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK. ID de OP/RC creada es retornado", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "409", description = "Imposible insertar", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/v1.0/allocationlines",
        produces = { "text/plain" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<String> addAllocationLine(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AllocationLine body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationlineApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Elimina una linea de OP/RC", description = "Elimina una linea de OP/RC existente", security = {
        @SecurityRequirement(name = "jwtAuth")    }, tags={ "allocationline" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "409", description = "Imposible eliminar", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "404", description = "No encontrado", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "204", description = "OK", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/v1.0/allocationlines/{id}",
        produces = { "text/plain" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<String> deleteAllocationLine(@Parameter(in = ParameterIn.PATH, description = "ID de linea de OP/RC", required=true, schema=@Schema()) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationlineApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Retorna una lista de lineas de OP/RC", description = "Retorna una lista de lineas de OP/RC", security = {
        @SecurityRequirement(name = "jwtAuth")    }, tags={ "allocationline" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AllocationLine.class)))) })
    @RequestMapping(value = "/v1.0/allocationlines",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<AllocationLine>> getAllAllocationLines(@Parameter(in = ParameterIn.QUERY, description = "Criterio de filtrado" ,schema=@Schema()) @Valid @RequestParam(value = "filter", required = false) String filter, @Parameter(in = ParameterIn.QUERY, description = "Campos a recuperar" ,schema=@Schema()) @Valid @RequestParam(value = "fields", required = false) String fields, @Parameter(in = ParameterIn.QUERY, description = "Criterio de ordenado" ,schema=@Schema()) @Valid @RequestParam(value = "sort", required = false) String sort, @Parameter(in = ParameterIn.QUERY, description = "Limite de elementos a retornar por pagina" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "Numero de pagina" ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Integer page) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"updatedby\" : 7,\n  \"ad_org_id\" : 6,\n  \"isactive\" : true,\n  \"referencedvalues\" : [ null, null ],\n  \"datetrx\" : \"datetrx\",\n  \"c_invoice_id\" : 4,\n  \"c_order_id\" : 7,\n  \"createdby\" : 1,\n  \"c_allocationline_id\" : 5,\n  \"line_description\" : \"line_description\",\n  \"ad_client_id\" : 0,\n  \"c_allocationhdr_id\" : 5,\n  \"overunderamt\" : 6.84685269835264,\n  \"discountamt\" : 1.4894159098541704,\n  \"amount\" : 1.4658129805029452,\n  \"c_currency_id\" : 9,\n  \"ismanual\" : true,\n  \"c_payment_id\" : 1,\n  \"changeamt\" : 3.616076749251911,\n  \"created\" : \"created\",\n  \"writeoffamt\" : 1.1730742509559433,\n  \"additionalvalues\" : [ {\n    \"value\" : \"value\",\n    \"key\" : \"key\"\n  }, {\n    \"value\" : \"value\",\n    \"key\" : \"key\"\n  } ],\n  \"c_cashline_id\" : 7,\n  \"c_invoice_credit_id\" : 2,\n  \"updated\" : \"updated\",\n  \"c_bpartner_id\" : 2\n}, {\n  \"updatedby\" : 7,\n  \"ad_org_id\" : 6,\n  \"isactive\" : true,\n  \"referencedvalues\" : [ null, null ],\n  \"datetrx\" : \"datetrx\",\n  \"c_invoice_id\" : 4,\n  \"c_order_id\" : 7,\n  \"createdby\" : 1,\n  \"c_allocationline_id\" : 5,\n  \"line_description\" : \"line_description\",\n  \"ad_client_id\" : 0,\n  \"c_allocationhdr_id\" : 5,\n  \"overunderamt\" : 6.84685269835264,\n  \"discountamt\" : 1.4894159098541704,\n  \"amount\" : 1.4658129805029452,\n  \"c_currency_id\" : 9,\n  \"ismanual\" : true,\n  \"c_payment_id\" : 1,\n  \"changeamt\" : 3.616076749251911,\n  \"created\" : \"created\",\n  \"writeoffamt\" : 1.1730742509559433,\n  \"additionalvalues\" : [ {\n    \"value\" : \"value\",\n    \"key\" : \"key\"\n  }, {\n    \"value\" : \"value\",\n    \"key\" : \"key\"\n  } ],\n  \"c_cashline_id\" : 7,\n  \"c_invoice_credit_id\" : 2,\n  \"updated\" : \"updated\",\n  \"c_bpartner_id\" : 2\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationlineApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Recupera una linea de OP/RC en particular", description = "Recupera la informacion de una linea de OP/RC en particular", security = {
        @SecurityRequirement(name = "jwtAuth")    }, tags={ "allocationline" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AllocationLine.class))) })
    @RequestMapping(value = "/v1.0/allocationlines/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AllocationLine> retrieveAllocationLine(@Parameter(in = ParameterIn.PATH, description = "ID de la linea de OP/RC", required=true, schema=@Schema()) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"updatedby\" : 7,\n  \"ad_org_id\" : 6,\n  \"isactive\" : true,\n  \"referencedvalues\" : [ null, null ],\n  \"datetrx\" : \"datetrx\",\n  \"c_invoice_id\" : 4,\n  \"c_order_id\" : 7,\n  \"createdby\" : 1,\n  \"c_allocationline_id\" : 5,\n  \"line_description\" : \"line_description\",\n  \"ad_client_id\" : 0,\n  \"c_allocationhdr_id\" : 5,\n  \"overunderamt\" : 6.84685269835264,\n  \"discountamt\" : 1.4894159098541704,\n  \"amount\" : 1.4658129805029452,\n  \"c_currency_id\" : 9,\n  \"ismanual\" : true,\n  \"c_payment_id\" : 1,\n  \"changeamt\" : 3.616076749251911,\n  \"created\" : \"created\",\n  \"writeoffamt\" : 1.1730742509559433,\n  \"additionalvalues\" : [ {\n    \"value\" : \"value\",\n    \"key\" : \"key\"\n  }, {\n    \"value\" : \"value\",\n    \"key\" : \"key\"\n  } ],\n  \"c_cashline_id\" : 7,\n  \"c_invoice_credit_id\" : 2,\n  \"updated\" : \"updated\",\n  \"c_bpartner_id\" : 2\n}", AllocationLine.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationlineApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Actualiza una linea de OP/RC existente", description = "", security = {
        @SecurityRequirement(name = "jwtAuth")    }, tags={ "allocationline" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "409", description = "Imposible actualizar", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "404", description = "No encontrado", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/v1.0/allocationlines/{id}",
        produces = { "text/plain" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<String> updateAllocationLine(@Parameter(in = ParameterIn.PATH, description = "ID de la linea de OP/RC a actualizar", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AllocationLine body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AllocationlineApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

