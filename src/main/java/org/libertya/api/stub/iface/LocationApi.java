/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.libertya.api.stub.iface;

import org.libertya.api.stub.model.Location;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "Location", description = "the Location API")
public interface LocationApi {

    Logger log = LoggerFactory.getLogger(LocationApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Nueva direccion", nickname = "addLocation", notes = "Agrega una nueva direccion", response = String.class, tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK. ID de direccion creada es retornado", response = String.class),
        @ApiResponse(code = 409, message = "Imposible insertar", response = String.class) })
    @RequestMapping(value = "/v1.0/locations",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> addLocation(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Location body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Elimina una direccion", nickname = "deleteLocation", notes = "Elimina una direccion existente", response = String.class, tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 409, message = "Imposible eliminar", response = String.class),
        @ApiResponse(code = 404, message = "No encontrado", response = String.class),
        @ApiResponse(code = 204, message = "OK", response = String.class) })
    @RequestMapping(value = "/v1.0/locations/{id}",
        produces = { "text/plain" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<String> deleteLocation(@ApiParam(value = "ID de direccion",required=true) @PathVariable("id") Integer id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Retrieve all locations", nickname = "getAllLocations", notes = "Retorna la lista completa de direcciones", response = Location.class, responseContainer = "List", tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Location.class, responseContainer = "List") })
    @RequestMapping(value = "/v1.0/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Location>> getAllLocations(@ApiParam(value = "Criterio de filtrado") @Valid @RequestParam(value = "filter", required = false) String filter
,@ApiParam(value = "Campos a recuperar") @Valid @RequestParam(value = "fields", required = false) String fields
,@ApiParam(value = "Criterio de ordenado") @Valid @RequestParam(value = "sort", required = false) String sort
,@ApiParam(value = "Limite de elementos a retornar por pagina") @Valid @RequestParam(value = "limit", required = false) Integer limit
,@ApiParam(value = "Numero de pagina") @Valid @RequestParam(value = "page", required = false) Integer page
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"postal_add\" : \"postal_add\",\n  \"updatedby\" : 9,\n  \"address3\" : \"address3\",\n  \"c_city_id\" : 1,\n  \"address2\" : \"address2\",\n  \"city\" : \"city\",\n  \"address1\" : \"address1\",\n  \"ad_org_id\" : 6,\n  \"created\" : \"created\",\n  \"isactive\" : true,\n  \"c_location_id\" : 5,\n  \"c_region_id\" : 7,\n  \"c_country_id\" : 5,\n  \"plaza\" : \"plaza\",\n  \"ad_componentobjectuid\" : \"ad_componentobjectuid\",\n  \"createdby\" : 2,\n  \"regionname\" : \"regionname\",\n  \"ad_client_id\" : 0,\n  \"address4\" : \"address4\",\n  \"postal\" : \"postal\",\n  \"updated\" : \"updated\"\n}, {\n  \"postal_add\" : \"postal_add\",\n  \"updatedby\" : 9,\n  \"address3\" : \"address3\",\n  \"c_city_id\" : 1,\n  \"address2\" : \"address2\",\n  \"city\" : \"city\",\n  \"address1\" : \"address1\",\n  \"ad_org_id\" : 6,\n  \"created\" : \"created\",\n  \"isactive\" : true,\n  \"c_location_id\" : 5,\n  \"c_region_id\" : 7,\n  \"c_country_id\" : 5,\n  \"plaza\" : \"plaza\",\n  \"ad_componentobjectuid\" : \"ad_componentobjectuid\",\n  \"createdby\" : 2,\n  \"regionname\" : \"regionname\",\n  \"ad_client_id\" : 0,\n  \"address4\" : \"address4\",\n  \"postal\" : \"postal\",\n  \"updated\" : \"updated\"\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Recupera una direccion en particular", nickname = "retrieveLocation", notes = "Recupera la informacion de una direccion en particular", response = Location.class, tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Location.class) })
    @RequestMapping(value = "/v1.0/locations/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Location> retrieveLocation(@ApiParam(value = "ID de la direccion",required=true) @PathVariable("id") Integer id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"postal_add\" : \"postal_add\",\n  \"updatedby\" : 9,\n  \"address3\" : \"address3\",\n  \"c_city_id\" : 1,\n  \"address2\" : \"address2\",\n  \"city\" : \"city\",\n  \"address1\" : \"address1\",\n  \"ad_org_id\" : 6,\n  \"created\" : \"created\",\n  \"isactive\" : true,\n  \"c_location_id\" : 5,\n  \"c_region_id\" : 7,\n  \"c_country_id\" : 5,\n  \"plaza\" : \"plaza\",\n  \"ad_componentobjectuid\" : \"ad_componentobjectuid\",\n  \"createdby\" : 2,\n  \"regionname\" : \"regionname\",\n  \"ad_client_id\" : 0,\n  \"address4\" : \"address4\",\n  \"postal\" : \"postal\",\n  \"updated\" : \"updated\"\n}", Location.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Actualiza una direccion existente", nickname = "updateLocation", notes = "", response = String.class, tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 409, message = "Imposible actualizar", response = String.class),
        @ApiResponse(code = 404, message = "No encontrado", response = String.class) })
    @RequestMapping(value = "/v1.0/locations/{id}",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<String> updateLocation(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Location body
,@ApiParam(value = "ID de la direccion a actualizar",required=true) @PathVariable("id") Integer id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
